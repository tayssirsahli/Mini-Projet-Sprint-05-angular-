{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class CosmetiqueService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiURL = 'http://localhost:9095/cosmetiques/api';\n    this.apiURL_class = 'http://localhost:8090/cosmetiques/api/clas';\n  }\n  listeCosmetiques() {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(this.apiURL + \"/all\", {\n      headers: httpHeaders\n    });\n  }\n  ajouterCosmetique(cosmetique) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.post(this.apiURL + \"/addcos\", cosmetique, {\n      headers: httpHeaders\n    });\n  }\n  supprimerCosmetique(id) {\n    const url = `${this.apiURL}/delcos/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.delete(url, {\n      headers: httpHeaders\n    });\n  }\n  consulterCosmetique(id) {\n    const url = `${this.apiURL}/getbyid/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(url, {\n      headers: httpHeaders\n    });\n  }\n  trierCosmetiques() {\n    this.cosmetiques = this.cosmetiques.sort((n1, n2) => {\n      if (n1 && n2 && n1.idCosmetique && n2.idCosmetique) {\n        if (n1.idCosmetique > n2.idCosmetique) {\n          return 1;\n        }\n        if (n1.idCosmetique < n2.idCosmetique) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n  }\n  updateCosmetique(cosmetique) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.put(this.apiURL + \"/updatecos\", cosmetique, {\n      headers: httpHeaders\n    });\n  }\n  listerClassifications() {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(this.apiURL_class, {\n      headers: httpHeaders\n    });\n  }\n  rechercheParClassification(idClas) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    const url = `${this.apiURL}/cosmetiqueClas/${idClas}`;\n    return this.http.get(url, {\n      headers: httpHeaders\n    });\n  }\n  consulterClassification(id) {\n    const classificationTrouvee = this.classifications.find(clas => clas.idClas == id);\n    if (classificationTrouvee) {\n      return classificationTrouvee;\n    } else {\n      throw new Error(`Classification non trouvée pour l'ID : ${id}`);\n    }\n  }\n  rechercherParNom(nom) {\n    const url = `${this.apiURL}/cosmetiqueByName/${nom}`;\n    return this.http.get(url);\n  }\n  ajouterClassification(clas) {\n    return this.http.post(this.apiURL_class, clas, httpOptions);\n  }\n  static #_ = this.ɵfac = function CosmetiqueService_Factory(t) {\n    return new (t || CosmetiqueService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CosmetiqueService,\n    factory: CosmetiqueService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","CosmetiqueService","constructor","http","authService","apiURL","apiURL_class","listeCosmetiques","jwt","getToken","httpHeaders","get","ajouterCosmetique","cosmetique","post","supprimerCosmetique","id","url","delete","consulterCosmetique","trierCosmetiques","cosmetiques","sort","n1","n2","idCosmetique","updateCosmetique","put","listerClassifications","rechercheParClassification","idClas","consulterClassification","classificationTrouvee","classifications","find","clas","Error","rechercherParNom","nom","ajouterClassification","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["D:\\2éme annéé\\s1\\angular\\cosmetique\\src\\app\\services\\Cosmetique.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Cosmetique } from '../model/Cosmetique.model'; // Changed import\nimport { AuthService } from './auth.service';\nimport { Classification } from '../model/classification.model';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CosmetiqueService { // Changed service name\n\n  apiURL: string = 'http://localhost:9095/cosmetiques/api';\n  apiURL_class: string = 'http://localhost:8090/cosmetiques/api/clas';\n\n  cosmetiques !: Cosmetique[]; // Changed type\n  classifications!: Classification[];\n\n  constructor(private http: HttpClient,\n    private authService: AuthService) {}\n\n  listeCosmetiques(): Observable<Cosmetique[]> { // Changed method name and return type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Cosmetique[]>(this.apiURL + \"/all\", { headers: httpHeaders });\n  }\n\n  ajouterCosmetique(cosmetique: Cosmetique): Observable<Cosmetique> { // Changed method name and parameter type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.post<Cosmetique>(this.apiURL + \"/addcos\", cosmetique, { headers: httpHeaders });\n  }\n\n  supprimerCosmetique(id: number) { // Changed method name\n    const url = `${this.apiURL}/delcos/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.delete(url, { headers: httpHeaders });\n  }\n\n  consulterCosmetique(id: number): Observable<Cosmetique> { // Changed method name and return type\n    const url = `${this.apiURL}/getbyid/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Cosmetique>(url, { headers: httpHeaders });\n  }\n\n  trierCosmetiques() { // Changed method name\n    this.cosmetiques = this.cosmetiques.sort((n1, n2) => {\n      if (n1 && n2 && n1.idCosmetique && n2.idCosmetique) {\n        if (n1.idCosmetique > n2.idCosmetique) {\n          return 1;\n        }\n        if (n1.idCosmetique < n2.idCosmetique) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n\n  }\n  updateCosmetique(cosmetique: Cosmetique): Observable<Cosmetique> { // Changed method name and parameter type\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.put<Cosmetique>(this.apiURL + \"/updatecos\", cosmetique, { headers: httpHeaders });\n  }\n\n  listerClassifications(): Observable<Classification[]> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Classification[]>(this.apiURL_class, { headers: httpHeaders });\n  }\n\n  rechercheParClassification(idClas: number): Observable<Cosmetique[]> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    const url = `${this.apiURL}/cosmetiqueClas/${idClas}`;\n    return this.http.get<Cosmetique[]>(url, { headers: httpHeaders });\n  }\n\n  consulterClassification(id: number): Classification {\n    const classificationTrouvee = this.classifications.find(clas => clas.idClas == id);\n    if (classificationTrouvee) {\n      return classificationTrouvee;\n    } else {\n      throw new Error(`Classification non trouvée pour l'ID : ${id}`);\n    }\n  }\n\n  rechercherParNom(nom: string): Observable<Cosmetique[]> { // Changed method name\n    const url = `${this.apiURL}/cosmetiqueByName/${nom}`;\n    return this.http.get<Cosmetique[]>(url);\n  }\n\n  ajouterClassification(clas: Classification): Observable<Classification> {\n    return this.http.post<Classification>(this.apiURL_class, clas, httpOptions);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}