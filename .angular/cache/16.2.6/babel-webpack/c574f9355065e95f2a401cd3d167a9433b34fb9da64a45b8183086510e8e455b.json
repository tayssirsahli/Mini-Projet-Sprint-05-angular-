{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiURL = 'http://localhost:9000/users';\n    this.isloggedIn = false;\n  }\n  login(user) {\n    return this.http.post(this.apiURL + '/login', user, {\n      observe: 'response'\n    });\n  }\n  saveToken(jwt) {\n    localStorage.setItem('jwt', jwt);\n    this.token = jwt;\n    this.isloggedIn = true;\n  }\n  getToken() {\n    return this.token;\n  }\n  logout() {\n    this.isloggedIn = false;\n    this.loggedUser = undefined;\n    this.roles = undefined;\n    localStorage.removeItem('loggedUser');\n    localStorage.setItem('isloggedIn', String(this.isloggedIn));\n    this.router.navigate(['/login']);\n  }\n  /*\n   SignIn(user: User): Boolean {\n     let validUser: Boolean = false;\n     this.users.forEach((curUser) => {\n       if (user.username == curUser.username && user.password == curUser.password) {\n         validUser = true;\n         this.loggedUser = curUser.username;\n         this.isloggedIn = true;\n         this.roles = curUser.roles;\n         localStorage.setItem('loggedUser', this.loggedUser);\n         localStorage.setItem('isloggedIn', String(this.isloggedIn));\n       }\n     });\n   return validUser;\n  }\n  */\n  isAdmin() {\n    if (!this.roles) return false;\n    return this.roles.indexOf('ADMIN') > -1;\n  }\n  setLoggedUserFromLocalStorage(login) {\n    this.loggedUser = login;\n    this.isloggedIn = true;\n    //this.getUserRoles(login);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","router","http","apiURL","isloggedIn","login","user","post","observe","saveToken","jwt","localStorage","setItem","token","getToken","logout","loggedUser","undefined","roles","removeItem","String","navigate","isAdmin","indexOf","setLoggedUserFromLocalStorage","_","i0","ɵɵinject","i1","Router","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\2éme annéé\\s1\\angular\\cosmetique\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User.model';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\napiURL: string = 'http://localhost:9000/users';\ntoken!:string;\n\n/*\nusers: User[] = [{\"username\":\"admin\",\"password\":\"123\",\"roles\":['ADMIN']},\n                {\"username\":\"Tayssir\",\"password\":\"123\",\"roles\":['USER']} ];\n*/\npublic loggedUser!:string;                    \npublic isloggedIn: Boolean = false;\npublic roles!:string[];\n\nconstructor(private router: Router,\n            private http : HttpClient) { }\n\nlogin(user : User)\n{\n  return this.http.post<User>(this.apiURL+'/login', user , {observe:'response'});\n}\nsaveToken(jwt:string){\n\n  localStorage.setItem('jwt',jwt);\n  this.token = jwt;\n  this.isloggedIn = true;\n }\n\n  getToken(): string {\n    return this.token;\n  }\n\nlogout(){\n  this.isloggedIn = false;\n  this.loggedUser = undefined!;\n  this.roles = undefined!;\n  localStorage.removeItem('loggedUser');\n  localStorage.setItem('isloggedIn',String(this.isloggedIn));\n  this.router.navigate(['/login']);\n}\n\n /*\n  SignIn(user: User): Boolean {\n    let validUser: Boolean = false;\n    this.users.forEach((curUser) => {\n      if (user.username == curUser.username && user.password == curUser.password) {\n        validUser = true;\n        this.loggedUser = curUser.username;\n        this.isloggedIn = true;\n        this.roles = curUser.roles;\n        localStorage.setItem('loggedUser', this.loggedUser);\n        localStorage.setItem('isloggedIn', String(this.isloggedIn));\n      }\n    });\n  return validUser;\n}\n*/\n\nisAdmin():Boolean{\n    if (!this.roles) \n      return false;\n  return (this.roles.indexOf('ADMIN') >-1);\n}\n\n  setLoggedUserFromLocalStorage(login: string) {\n    this.loggedUser = login;\n    this.isloggedIn = true;\n    //this.getUserRoles(login);\n  }\n\n  /*\n  getUserRoles(username: string) {\n    this.users.forEach((curUser) => {\n      if (curUser.username == username) {\n        this.roles = curUser.roles;\n      }\n    });\n}\n*/\n\n}\n"],"mappings":";;;AASA,OAAM,MAAOA,WAAW;EAaxBC,YAAoBC,MAAc,EACdC,IAAiB;IADjB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,IAAI,GAAJA,IAAI;IAZxB,KAAAC,MAAM,GAAW,6BAA6B;IAQvC,KAAAC,UAAU,GAAY,KAAK;EAIO;EAEzCC,KAAKA,CAACC,IAAW;IAEf,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAO,IAAI,CAACJ,MAAM,GAAC,QAAQ,EAAEG,IAAI,EAAG;MAACE,OAAO,EAAC;IAAU,CAAC,CAAC;EAChF;EACAC,SAASA,CAACC,GAAU;IAElBC,YAAY,CAACC,OAAO,CAAC,KAAK,EAACF,GAAG,CAAC;IAC/B,IAAI,CAACG,KAAK,GAAGH,GAAG;IAChB,IAAI,CAACN,UAAU,GAAG,IAAI;EACvB;EAECU,QAAQA,CAAA;IACN,OAAO,IAAI,CAACD,KAAK;EACnB;EAEFE,MAAMA,CAAA;IACJ,IAAI,CAACX,UAAU,GAAG,KAAK;IACvB,IAAI,CAACY,UAAU,GAAGC,SAAU;IAC5B,IAAI,CAACC,KAAK,GAAGD,SAAU;IACvBN,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;IACrCR,YAAY,CAACC,OAAO,CAAC,YAAY,EAACQ,MAAM,CAAC,IAAI,CAAChB,UAAU,CAAC,CAAC;IAC1D,IAAI,CAACH,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEC;;;;;;;;;;;;;;;;EAiBDC,OAAOA,CAAA;IACH,IAAI,CAAC,IAAI,CAACJ,KAAK,EACb,OAAO,KAAK;IAChB,OAAQ,IAAI,CAACA,KAAK,CAACK,OAAO,CAAC,OAAO,CAAC,GAAE,CAAC,CAAC;EACzC;EAEEC,6BAA6BA,CAACnB,KAAa;IACzC,IAAI,CAACW,UAAU,GAAGX,KAAK;IACvB,IAAI,CAACD,UAAU,GAAG,IAAI;IACtB;EACF;EAAC,QAAAqB,CAAA,G;qBAnEU1B,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXjC,WAAW;IAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}