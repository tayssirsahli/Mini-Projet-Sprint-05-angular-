{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class ArticleService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiURL = 'http://localhost:8090/cosmetiques/api';\n    this.apiURL_class = 'http://localhost:8090/cosmetiques/api/clas';\n    /*\n      this.classifications = [ {idClas : 1,nomClas : \"Maquillage\"},\n                              {idClas : 2, nomClas : \"Soins de la peau\"},\n                              {idClas : 3, nomClas : \"Soins capillaires\"},\n                              {idClas : 4, nomClas : \"Parfums\"},\n                              {idClas : 5, nomClas : \"article d'hygiène personnelle\"},\n                              {idClas : 6, nomClas : \"Soins des ongles\"}];\n         this.cosmetiques  = [\n      { idCosmetique: 1, nomCosmetique: \"SUN SECURE Blur SPF50\", prixCosmetique: 69, dateCreation: new Date(\"2011-01-14\"), Classification: { idClas: 2, nomClas: \"Soins de la peau\" } },\n      { idCosmetique: 2, nomCosmetique: \"SVR sebiaclear gel moussant 200 ml\", prixCosmetique: 30, dateCreation: new Date(\"2020-12-17\"), Classification: { idClas: 2, nomClas: \"Soins de la peau\" } },\n      { idCosmetique: 3, nomCosmetique: \"Kit Lissage Protein&Collagen 115 ml\", prixCosmetique: 109, dateCreation: new Date(\"2021-06-29\"), Classification: { idClas: 2, nomClas: \"Soins capillaires\" } },\n      { idCosmetique: 4, nomCosmetique: \"SVR hydraliane crème hydratante riche 40 Ml\", prixCosmetique: 46, dateCreation: new Date(\"2020-02-20\"), Classification: { idClas: 2, nomClas: \"Soins de la peau\" } }\n    ]; */\n  }\n\n  listeArticleCosmetique() {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(this.apiURL + \"/all\", {\n      headers: httpHeaders\n    });\n  }\n  ajouterArticleCosmetique(cosmetique) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.post(this.apiURL + \"/addcos\", cosmetique, {\n      headers: httpHeaders\n    });\n  }\n  supprimerArticleCosmetique(id) {\n    const url = `${this.apiURL}/delcos/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.delete(url, {\n      headers: httpHeaders\n    });\n  }\n  consulterArticle(id) {\n    const url = `${this.apiURL}/getbyid/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(url, {\n      headers: httpHeaders\n    });\n  }\n  trierArticleCosmetique() {\n    this.cosmetiques = this.cosmetiques.sort((n1, n2) => {\n      if (n1 && n2 && n1.idCosmetique && n2.idCosmetique) {\n        if (n1.idCosmetique > n2.idCosmetique) {\n          return 1;\n        }\n        if (n1.idCosmetique < n2.idCosmetique) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n  }\n  updateArticleCosmetique(cosmetique) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.put(this.apiURL + \"/updatecos\", cosmetique, {\n      headers: httpHeaders\n    });\n  }\n  listerClassifications() {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    return this.http.get(this.apiURL_class, {\n      headers: httpHeaders\n    });\n  }\n  rechercheParClassification(idClas) {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({\n      \"Authorization\": jwt\n    });\n    const url = `${this.apiURL}/cosmetiqueClas/${idClas}`;\n    return this.http.get(url, {\n      headers: httpHeaders\n    });\n  }\n  consulterClassification(id) {\n    const classificationTrouvee = this.classifications.find(clas => clas.idClas == id);\n    if (classificationTrouvee) {\n      return classificationTrouvee;\n    } else {\n      throw new Error(`Classification non trouvée pour l'ID : ${id}`);\n    }\n  }\n  rechercherParNom(nom) {\n    const url = `${this.apiURL}/cosmetiqueByName/${nom}`;\n    return this.http.get(url);\n  }\n  ajouterClassification(clas) {\n    return this.http.post(this.apiURL_class, clas, httpOptions);\n  }\n  static #_ = this.ɵfac = function ArticleService_Factory(t) {\n    return new (t || ArticleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticleService,\n    factory: ArticleService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","ArticleService","constructor","http","authService","apiURL","apiURL_class","listeArticleCosmetique","jwt","getToken","httpHeaders","get","ajouterArticleCosmetique","cosmetique","post","supprimerArticleCosmetique","id","url","delete","consulterArticle","trierArticleCosmetique","cosmetiques","sort","n1","n2","idCosmetique","updateArticleCosmetique","put","listerClassifications","rechercheParClassification","idClas","consulterClassification","classificationTrouvee","classifications","find","clas","Error","rechercherParNom","nom","ajouterClassification","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["D:\\2éme annéé\\s1\\angular\\cosmetique\\src\\app\\services\\Cosmetique.service.ts"],"sourcesContent":["import { AuthService } from './auth.service';\nimport { Classification } from './../model/classification.model';\nimport { RechercheParClasstficationComponent } from './../recherche-par-classtfication/recherche-par-classtfication.component';\nimport { Injectable } from '@angular/core';\nimport { Cosmetique } from '../model/cosmetique.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArticleService {\n\n  apiURL: string = 'http://localhost:8090/cosmetiques/api';\n  apiURL_class: string = 'http://localhost:8090/cosmetiques/api/clas';\n\n  cosmetiques !: Cosmetique[];\n  classifications!: Classification[];\n\n  constructor(private http: HttpClient,\n    private authService: AuthService) {\n    /*\n      this.classifications = [ {idClas : 1,nomClas : \"Maquillage\"},\n                              {idClas : 2, nomClas : \"Soins de la peau\"},\n                              {idClas : 3, nomClas : \"Soins capillaires\"},\n                              {idClas : 4, nomClas : \"Parfums\"},\n                              {idClas : 5, nomClas : \"article d'hygiène personnelle\"},\n                              {idClas : 6, nomClas : \"Soins des ongles\"}]; \n\n    this.cosmetiques  = [\n      { idCosmetique: 1, nomCosmetique: \"SUN SECURE Blur SPF50\", prixCosmetique: 69, dateCreation: new Date(\"2011-01-14\"), Classification: { idClas: 2, nomClas: \"Soins de la peau\" } },\n      { idCosmetique: 2, nomCosmetique: \"SVR sebiaclear gel moussant 200 ml\", prixCosmetique: 30, dateCreation: new Date(\"2020-12-17\"), Classification: { idClas: 2, nomClas: \"Soins de la peau\" } },\n      { idCosmetique: 3, nomCosmetique: \"Kit Lissage Protein&Collagen 115 ml\", prixCosmetique: 109, dateCreation: new Date(\"2021-06-29\"), Classification: { idClas: 2, nomClas: \"Soins capillaires\" } },\n      { idCosmetique: 4, nomCosmetique: \"SVR hydraliane crème hydratante riche 40 Ml\", prixCosmetique: 46, dateCreation: new Date(\"2020-02-20\"), Classification: { idClas: 2, nomClas: \"Soins de la peau\" } }\n    ]; */\n  }\n\n  listeArticleCosmetique(): Observable<Cosmetique[]> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Cosmetique[]>(this.apiURL + \"/all\", { headers: httpHeaders });\n  }\n  ajouterArticleCosmetique(cosmetique: Cosmetique): Observable<Cosmetique> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.post<Cosmetique>(this.apiURL + \"/addcos\", cosmetique, { headers: httpHeaders });\n\n  }\n\n  supprimerArticleCosmetique(id: number) {\n    const url = `${this.apiURL}/delcos/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.delete(url, { headers: httpHeaders });\n  }\n\n  consulterArticle(id: number): Observable<Cosmetique> {\n    const url = `${this.apiURL}/getbyid/${id}`;\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Cosmetique>(url, { headers: httpHeaders });\n  }\n\n  trierArticleCosmetique() {\n    this.cosmetiques = this.cosmetiques.sort((n1, n2) => {\n      if (n1 && n2 && n1.idCosmetique && n2.idCosmetique) {\n        if (n1.idCosmetique > n2.idCosmetique) {\n          return 1;\n        }\n        if (n1.idCosmetique < n2.idCosmetique) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n\n  }\n  updateArticleCosmetique(cosmetique: Cosmetique): Observable<Cosmetique> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.put<Cosmetique>(this.apiURL + \"/updatecos\", cosmetique, { headers: httpHeaders });\n  }\n\n  listerClassifications(): Observable<Classification[]> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    return this.http.get<Classification[]>(this.apiURL_class, { headers: httpHeaders });\n  }\n\n  rechercheParClassification(idClas: number): Observable<Cosmetique[]> {\n    let jwt = this.authService.getToken();\n    jwt = \"Bearer \" + jwt;\n    let httpHeaders = new HttpHeaders({ \"Authorization\": jwt });\n    const url = `${this.apiURL}/cosmetiqueClas/${idClas}`;\n    return this.http.get<Cosmetique[]>(url, { headers: httpHeaders });\n  }\n\n  consulterClassification(id: number): Classification {\n    const classificationTrouvee = this.classifications.find(clas => clas.idClas == id);\n    if (classificationTrouvee) {\n      return classificationTrouvee;\n    } else {\n      throw new Error(`Classification non trouvée pour l'ID : ${id}`);\n    }\n  }\n\n  rechercherParNom(nom: string): Observable<Cosmetique[]> {\n    const url = `${this.apiURL}/cosmetiqueByName/${nom}`;\n    return this.http.get<Cosmetique[]>(url);\n  }\n\n  ajouterClassification(clas: Classification): Observable<Classification> {\n    return this.http.post<Classification>(this.apiURL_class, clas, httpOptions);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}