{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class ArticleService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:8090/cosmetiques/api';\n    /*\n      this.classifications = [ {idClas : 1,nomClas : \"Maquillage\"},\n                              {idClas : 2, nomClas : \"Soins de la peau\"},\n                              {idClas : 3, nomClas : \"Soins capillaires\"},\n                              {idClas : 4, nomClas : \"Parfums\"},\n                              {idClas : 5, nomClas : \"article d'hygiène personnelle\"},\n                              {idClas : 6, nomClas : \"Soins des ongles\"}];\n         \n    this.cosmetiques  = [\n      { idarticle: 1, nomarticle: \"SUN SECURE Blur SPF50\", prixarticle: 69, dateCreation: new Date(\"2011-01-14\") , Classification : {idClas : 2, nomClas : \"Soins de la peau\"}},\n      { idarticle: 2, nomarticle: \"SVR sebiaclear gel moussant 200 ml\", prixarticle: 30, dateCreation: new Date(\"2020-12-17\"), Classification : {idClas : 2, nomClas : \"Soins de la peau\"}},\n      { idarticle: 3, nomarticle: \"Kit Lissage Protein&Collagen 115 ml\", prixarticle: 109, dateCreation: new Date(\"2021-06-29\"), Classification : {idClas : 2, nomClas : \"Soins capillaires\"}},\n      { idarticle: 4, nomarticle: \"SVR hydraliane crème hydratante riche 40 Ml\", prixarticle: 46, dateCreation: new Date(\"2020-02-20\"), Classification : {idClas : 2, nomClas : \"Soins de la peau\"}}\n    ]; */\n  }\n\n  listeArticleCosmetique() {\n    return this.http.get(this.apiURL);\n  }\n  ajouterArticleCosmetique(article_COS) {\n    return this.http.post(this.apiURL, article_COS, httpOptions);\n  }\n  supprimerArticle_cosmetique(id) {\n    const url = `${this.apiURL}/${id}`;\n    return this.http.delete(url, httpOptions);\n  }\n  consulterArticle(id) {\n    this.article = this.cosmetiques.find(A => A.idarticle == id);\n    return this.article;\n  }\n  trierArticle_cosmetique() {\n    this.cosmetiques = this.cosmetiques.sort((n1, n2) => {\n      if (n1 && n2 && n1.idarticle && n2.idarticle) {\n        if (n1.idarticle > n2.idarticle) {\n          return 1;\n        }\n        if (n1.idarticle < n2.idarticle) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n  }\n  updateArticle_cosmetique(A) {\n    // console.log(A);\n    this.supprimerArticle_cosmetique(A.idarticle);\n    this.ajouterArticleCosmetique(A);\n    this.trierArticle_cosmetique();\n  }\n  listeclassifications() {\n    return this.classifications;\n  }\n  rechercheParClasstfication(id) {\n    this.cosmetiques = [];\n    if (Array.isArray(this.cosmetiques)) {\n      this.cosmetiques.forEach((cur, index) => {\n        if (id == cur.Classification?.idClas) {\n          this.cosmetiques.push(cur);\n        }\n      });\n    }\n    return this.cosmetiques;\n  }\n  /* RechercheParClassification(idClas: number): article[] {\n    return this.cosmetiques.filter(article => article.Classification?.idClas === idClas);\n  } */\n  consulterClassification(id) {\n    const classificationTrouvee = this.classifications.find(clas => clas.idClas == id);\n    if (classificationTrouvee) {\n      return classificationTrouvee;\n    } else {\n      throw new Error(`Classification non trouvée pour l'ID : ${id}`);\n    }\n  }\n  rechercherParNom(nom) {\n    const filteredData = this.cosmetiques.filter(article => article.nomarticle.toLowerCase().includes(nom.toLowerCase()));\n    return filteredData;\n  }\n  static #_ = this.ɵfac = function ArticleService_Factory(t) {\n    return new (t || ArticleService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticleService,\n    factory: ArticleService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","ArticleService","constructor","http","apiURL","listeArticleCosmetique","get","ajouterArticleCosmetique","article_COS","post","supprimerArticle_cosmetique","id","url","delete","consulterArticle","article","cosmetiques","find","A","idarticle","trierArticle_cosmetique","sort","n1","n2","updateArticle_cosmetique","listeclassifications","classifications","rechercheParClasstfication","Array","isArray","forEach","cur","index","Classification","idClas","push","consulterClassification","classificationTrouvee","clas","Error","rechercherParNom","nom","filteredData","filter","nomarticle","toLowerCase","includes","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\2éme annéé\\s1\\angular\\cosmetique\\src\\app\\services\\article.service.ts"],"sourcesContent":["import { Classification } from './../model/classification.model';\nimport { RechercheParClasstficationComponent } from './../recherche-par-classtfication/recherche-par-classtfication.component';\nimport { Injectable } from '@angular/core';\nimport { article } from '../model/article.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nconst httpOptions = {\n  headers: new HttpHeaders( {'Content-Type': 'application/json'} )\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArticleService {\n\n  apiURL: string = 'http://localhost:8090/cosmetiques/api';\n\n  cosmetiques !: article[]; \n  classifications! : Classification[];\n \n\n  constructor(private http : HttpClient) {\n  /*\n    this.classifications = [ {idClas : 1,nomClas : \"Maquillage\"},\n                            {idClas : 2, nomClas : \"Soins de la peau\"},\n                            {idClas : 3, nomClas : \"Soins capillaires\"},\n                            {idClas : 4, nomClas : \"Parfums\"},\n                            {idClas : 5, nomClas : \"article d'hygiène personnelle\"},\n                            {idClas : 6, nomClas : \"Soins des ongles\"}]; \n\n\n  this.cosmetiques  = [\n    { idarticle: 1, nomarticle: \"SUN SECURE Blur SPF50\", prixarticle: 69, dateCreation: new Date(\"2011-01-14\") , Classification : {idClas : 2, nomClas : \"Soins de la peau\"}},\n    { idarticle: 2, nomarticle: \"SVR sebiaclear gel moussant 200 ml\", prixarticle: 30, dateCreation: new Date(\"2020-12-17\"), Classification : {idClas : 2, nomClas : \"Soins de la peau\"}},\n    { idarticle: 3, nomarticle: \"Kit Lissage Protein&Collagen 115 ml\", prixarticle: 109, dateCreation: new Date(\"2021-06-29\"), Classification : {idClas : 2, nomClas : \"Soins capillaires\"}},\n    { idarticle: 4, nomarticle: \"SVR hydraliane crème hydratante riche 40 Ml\", prixarticle: 46, dateCreation: new Date(\"2020-02-20\"), Classification : {idClas : 2, nomClas : \"Soins de la peau\"}}\n  ]; */\n  }\n\n  listeArticleCosmetique(): Observable<article[]>{\n    return this.http.get<article[]>(this.apiURL);\n    }\n  ajouterArticleCosmetique( article_COS: article):Observable<article>{\n      return this.http.post<article>(this.apiURL, article_COS, httpOptions);\n      }\n      \n  supprimerArticle_cosmetique(id: number) {\n    const url = `${this.apiURL}/${id}`;\n    return this.http.delete(url, httpOptions);\n  }\n  \n  article!: article;\n  consulterArticle(id: number): article {\n    this.article = this.cosmetiques.find(A => A.idarticle == id)!;\n    return this.article;\n  }\n\n  trierArticle_cosmetique() {\n    this.cosmetiques = this.cosmetiques.sort((n1, n2) => {\n      if (n1 && n2 && n1.idarticle && n2.idarticle) {\n        if (n1.idarticle > n2.idarticle) {\n          return 1;\n        }\n        if (n1.idarticle < n2.idarticle) {\n          return -1;\n        }\n        return 0;\n      }\n      return 0;\n    });\n\n  }\n  updateArticle_cosmetique(A: article) {\n    // console.log(A);\n    this.supprimerArticle_cosmetique(A.idarticle);\n    this.ajouterArticleCosmetique(A);\n    this.trierArticle_cosmetique();\n\n  }\n  listeclassifications(): Classification[] {\n    return this.classifications;\n  }\n  rechercheParClasstfication(id: number): article[] {\n    this.cosmetiques = [];\n\n    if (Array.isArray(this.cosmetiques)) {\n      this.cosmetiques.forEach((cur, index) => {\n        if (id == cur.Classification?.idClas) {\n          this.cosmetiques.push(cur);\n        }\n      });\n    }\n\n    return this.cosmetiques;\n  }\n\n  /* RechercheParClassification(idClas: number): article[] {\n    return this.cosmetiques.filter(article => article.Classification?.idClas === idClas);\n  } */\n\n  consulterClassification(id: number): Classification {\n    const classificationTrouvee = this.classifications.find(clas => clas.idClas == id);\n    if (classificationTrouvee) {\n      return classificationTrouvee;\n    } else {\n      throw new Error(`Classification non trouvée pour l'ID : ${id}`);\n    }\n  }\n  \n  rechercherParNom(nom: string): any[] {\n    const filteredData = this.cosmetiques.filter(article => article.nomarticle.toLowerCase().includes(nom.toLowerCase()));\n    return filteredData;\n  }\n    \n  }\n  \n  \n  \n  \n         \n\n  \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}