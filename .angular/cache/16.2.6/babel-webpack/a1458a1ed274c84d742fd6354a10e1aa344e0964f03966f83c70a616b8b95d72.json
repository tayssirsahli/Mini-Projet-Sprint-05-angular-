{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class TokenInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const toExclude = \"/login\";\n    //tester s'il sagit de login, on n'ajoute pas le header Authorization\n    //puisqu'on a pas encode de JWT (il est null)\n    if (request.url.search(toExclude) === -1) {\n      let jwt = this.authService.getToken();\n      let reqWithToken = request.clone({\n        setHeaders: {\n          Authorization: \"Bearer \" + jwt\n        }\n      });\n      return next.handle(reqWithToken);\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["TokenInterceptor","constructor","authService","intercept","request","next","toExclude","url","search","jwt","getToken","reqWithToken","clone","setHeaders","Authorization","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["D:\\2éme annéé\\s1\\angular\\cosmetique\\src\\app\\services\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private authService : AuthService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const toExclude = \"/login\";\n    //tester s'il sagit de login, on n'ajoute pas le header Authorization\n    //puisqu'on a pas encode de JWT (il est null)\n    if (request.url.search(toExclude) === -1) {\n      let jwt = this.authService.getToken();\n      let reqWithToken = request.clone({\n        setHeaders: { Authorization: \"Bearer \" + jwt }\n      })\n      return next.handle(reqWithToken);\n    }\n    return next.handle(request);\n  }\n}\n\n"],"mappings":";;AAWA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAoBC,WAAyB;IAAzB,KAAAA,WAAW,GAAXA,WAAW;EAAkB;EAEjDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,SAAS,GAAG,QAAQ;IAC1B;IACA;IACA,IAAIF,OAAO,CAACG,GAAG,CAACC,MAAM,CAACF,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;MACxC,IAAIG,GAAG,GAAG,IAAI,CAACP,WAAW,CAACQ,QAAQ,EAAE;MACrC,IAAIC,YAAY,GAAGP,OAAO,CAACQ,KAAK,CAAC;QAC/BC,UAAU,EAAE;UAAEC,aAAa,EAAE,SAAS,GAAGL;QAAG;OAC7C,CAAC;MACF,OAAOJ,IAAI,CAACU,MAAM,CAACJ,YAAY,CAAC;;IAElC,OAAON,IAAI,CAACU,MAAM,CAACX,OAAO,CAAC;EAC7B;EAAC,QAAAY,CAAA,G;qBAhBUhB,gBAAgB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBrB,gBAAgB;IAAAsB,OAAA,EAAhBtB,gBAAgB,CAAAuB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}